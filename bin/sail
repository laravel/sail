#!/usr/bin/env bash

if ! [ -x "$(command -v docker-compose)" ]; then
    shopt -s expand_aliases
    alias docker-compose='docker compose'
fi

UNAMEOUT="$(uname -s)"

WHITE='\033[1;37m'
NC='\033[0m'

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Laravel Sail supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Source the ".env" file so Laravel's environment variables are available...
if [ -f ./.env ]; then
    source ./.env
fi

# Define environment variables...
export APP_PORT=${APP_PORT:-80}
export APP_SERVICE=${APP_SERVICE:-"laravel.test"}
export DB_PORT=${DB_PORT:-3306}
export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWGROUP:-$(id -g)}

export SAIL_FILES=${SAIL_FILES:-""}
export SAIL_SHARE_DASHBOARD=${SAIL_SHARE_DASHBOARD:-4040}
export SAIL_SHARE_SERVER_HOST=${SAIL_SHARE_SERVER_HOST:-"laravel-sail.site"}
export SAIL_SHARE_SERVER_PORT=${SAIL_SHARE_SERVER_PORT:-8080}
export SAIL_SHARE_SUBDOMAIN=${SAIL_SHARE_SUBDOMAIN:-""}

# Function that outputs Sail is not running...
function sail_is_not_running {
    echo -e "${WHITE}Sail is not running.${NC}" >&2
    echo "" >&2
    echo -e "${WHITE}You may Sail using the following commands:${NC} './vendor/bin/sail up' or './vendor/bin/sail up -d'" >&2

    exit 1
}

# Function that prints the available commands...
function display_help {
    YELLOW='\e[33m'
    GREEN='\e[32m'
    END='\e[0m'

    echo -e "Laravel Sail"
    echo
    echo -e "${YELLOW}Usage:${END}" >&2
    echo -e "  sail COMMAND [options] [arguments]"
    echo
    echo -e "Docker files for running a basic Laravel application."
    echo -e "Unknown commands are passed to the docker-compose binary."
    echo
    echo -e "${YELLOW}Docker-compose Commands:${END}"
    echo -e "  ${GREEN}sail up${END}        Starts the application"
    echo -e "  ${GREEN}sail up -d${END}     Starts the application in the background"
    echo -e "  ${GREEN}sail stop${END}      Stops the application"
    echo -e "  ${GREEN}sail restart${END}   Restarts the application"
    echo -e "  ${GREEN}sail ps${END}        Displays the status of the containers"
    echo
    echo -e "${YELLOW}Artisan Commands:${END}"
    echo -e "  ${GREEN}sail artisan ...${END}          Runs an artisan command"
    echo -e "  ${GREEN}sail artisan queue:work${END}"
    echo
    echo -e "${YELLOW}PHP Commands:${END}"
    echo -e "  ${GREEN}sail php ...${END}   Runs a PHP command"
    echo -e "  ${GREEN}sail php -v${END}"
    echo
    echo -e "${YELLOW}Composer Commands:${END}"
    echo -e "  ${GREEN}sail composer ...${END}                       Runs a composer command"
    echo -e "  ${GREEN}sail composer require laravel/sanctum${END}"
    echo
    echo -e "${YELLOW}Node Commands:${END}"
    echo -e "  ${GREEN}sail node ...${END}         Runs a node command"
    echo -e "  ${GREEN}sail node --version${END}"
    echo
    echo -e "${YELLOW}NPM Commands:${END}"
    echo -e "  ${GREEN}sail npm ...${END}        Runs a npm command"
    echo -e "  ${GREEN}sail npx${END}            Runs a npx command"
    echo -e "  ${GREEN}sail npm run prod${END}"
    echo
    echo -e "${YELLOW}Yarn Commands:${END}"
    echo -e "  ${GREEN}sail yarn ...${END}        Runs a yarn command"
    echo -e "  ${GREEN}sail yarn run prod${END}"
    echo
    echo -e "${YELLOW}Database Commands:${END}"
    echo -e "  ${GREEN}sail mysql${END}     Instantiate a MySQL CLI session within the 'mysql' container"
    echo -e "  ${GREEN}sail mariadb${END}   Instantiate a MySQL CLI session within the 'mariadb' container"
    echo -e "  ${GREEN}sail psql${END}      Instantiate a PostgreSQL CLI session within the 'pgsql' container"
    echo -e "  ${GREEN}sail redis${END}     Instantiate a Redis CLI session within the 'redis' container"
    echo
    echo -e "${YELLOW}Debugging:${END}"
    echo -e "  ${GREEN}sail debug ...${END}          Runs an artisan command in debug mode"
    echo -e "  ${GREEN}sail debug queue:work${END}"
    echo
    echo -e "${YELLOW}Running Tests:${END}"
    echo -e "  ${GREEN}sail test${END}          Runs the PHPUnit tests"
    echo -e "  ${GREEN}sail phpunit ...${END}   Runs the vendor/bin/phpunit binary"
    echo -e "  ${GREEN}sail dusk${END}          Runs the Dusk tests (Requires the laravel/dusk package)"
    echo
    echo -e "${YELLOW}Container CLI:${END}"
    echo -e "  ${GREEN}sail shell${END}        Connect to the container's shell"
    echo -e "  ${GREEN}sail bash${END}         Alias for 'sail shell'"
    echo -e "  ${GREEN}sail root-shell${END}   Connect to the container's root shell"
    echo -e "  ${GREEN}sail root-bash${END}    Alias for 'sail root-shell'"
    echo -e "  ${GREEN}sail tinker${END}       Starts a new Laravel Tinker session"
    echo
    echo -e "${YELLOW}Share Site:${END}"
    echo -e "  ${GREEN}sail share${END}   Makes the application available on the internet"
    echo
    echo -e "${YELLOW}Customization:${END}"
    echo -e "  ${GREEN}sail artisan sail:publish${END}   Publishes the Sail configuration files"
    echo -e "  ${GREEN}sail build --no-cache${END}       Rebuilds the containers"

    exit 1
}

# Define Docker Compose command prefix...
DOCKER_COMPOSE=(docker-compose)

if [ -n "$SAIL_FILES" ]; then
    # Convert SAIL_FILES to an array...
    SAIL_FILES=(${SAIL_FILES//:/ })

    for FILE in "${SAIL_FILES[@]}"; do
        if [ -f "$FILE" ]; then
            DOCKER_COMPOSE+=(-f "$FILE")
        else
            echo -e "${WHITE}Unable to find Docker Compose file: '${FILE}'${NC}" >&2

            exit 1
        fi
    done
fi

EXEC="yes"

if [ -z "$SAIL_SKIP_CHECKS" ]; then
    # Ensure that Docker is running...
    if ! docker info > /dev/null 2>&1; then
        echo -e "${WHITE}Docker is not running.${NC}" >&2

        exit 1
    fi

    # Determine if Sail is currently up...
    if "${DOCKER_COMPOSE[@]}" ps "$APP_SERVICE" | grep 'Exit\|exited'; then
        echo -e "${WHITE}Shutting down old Sail processes...${NC}" >&2

        "${DOCKER_COMPOSE[@]}" down > /dev/null 2>&1

        EXEC="no"
    elif [ -z "$(${DOCKER_COMPOSE[@]} ps -q)" ]; then
        EXEC="no"
    fi
fi

ARGS=()

if [ $# -gt 0 ]; then

    # Proxy the "help" command to show a list of available commands...
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        shift 1

        display_help

    # Proxy PHP commands to the "php" binary on the application container...
    elif [ "$1" == "php" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" "php" "$@")
        else
            sail_is_not_running
        fi

    # Proxy vendor binary commands on the application container...
    elif [ "$1" == "bin" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" ./vendor/bin/"$@")
        else
            sail_is_not_running
        fi

    # Proxy Composer commands to the "composer" binary on the application container...
    elif [ "$1" == "composer" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" "composer" "$@")
        else
            sail_is_not_running
        fi

    # Proxy Artisan commands to the "artisan" binary on the application container...
    elif [ "$1" == "artisan" ] || [ "$1" == "art" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" php artisan "$@")
        else
            sail_is_not_running
        fi

    # Proxy the "debug" command to the "php artisan" binary on the application container with xdebug enabled...
    elif [ "$1" == "debug" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail -e XDEBUG_SESSION=1)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" php artisan "$@")
        else
            sail_is_not_running
        fi

    # Proxy the "test" command to the "php artisan test" Artisan command...
    elif [ "$1" == "test" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" php artisan test "$@")
        else
            sail_is_not_running
        fi

    # Proxy the "phpunit" command to "php vendor/bin/phpunit"...
    elif [ "$1" == "phpunit" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" php vendor/bin/phpunit "$@")
        else
            sail_is_not_running
        fi

    # Proxy the "dusk" command to the "php artisan dusk" Artisan command...
    elif [ "$1" == "dusk" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=(-e "APP_URL=http://${APP_SERVICE}")
            ARGS+=(-e "DUSK_DRIVER_URL=http://selenium:4444/wd/hub")
            ARGS+=("$APP_SERVICE" php artisan dusk "$@")
        else
            sail_is_not_running
        fi

    # Proxy the "dusk:fails" command to the "php artisan dusk:fails" Artisan command...
    elif [ "$1" == "dusk:fails" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=(-e "APP_URL=http://${APP_SERVICE}")
            ARGS+=(-e "DUSK_DRIVER_URL=http://selenium:4444/wd/hub")
            ARGS+=("$APP_SERVICE" php artisan dusk:fails "$@")
        else
            sail_is_not_running
        fi

    # Initiate a Laravel Tinker session within the application container...
    elif [ "$1" == "tinker" ] ; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" php artisan tinker)
        else
            sail_is_not_running
        fi

    # Proxy Node commands to the "node" binary on the application container...
    elif [ "$1" == "node" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" node "$@")
        else
            sail_is_not_running
        fi

    # Proxy NPM commands to the "npm" binary on the application container...
    elif [ "$1" == "npm" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" npm "$@")
        else
            sail_is_not_running
        fi

    # Proxy NPX commands to the "npx" binary on the application container...
    elif [ "$1" == "npx" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" npx "$@")
        else
            sail_is_not_running
        fi

    # Proxy YARN commands to the "yarn" binary on the application container...
    elif [ "$1" == "yarn" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" yarn "$@")
        else
            sail_is_not_running
        fi

    # Initiate a MySQL CLI terminal session within the "mysql" container...
    elif [ "$1" == "mysql" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=(mysql bash -c)
            ARGS+=('MYSQL_PWD=${MYSQL_PASSWORD} mysql -u ${MYSQL_USER} ${MYSQL_DATABASE}')
        else
            sail_is_not_running
        fi

    # Initiate a MySQL CLI terminal session within the "mariadb" container...
    elif [ "$1" == "mariadb" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=(mariadb bash -c)
            ARGS+=('MYSQL_PWD=${MYSQL_PASSWORD} mysql -u ${MYSQL_USER} ${MYSQL_DATABASE}')
        else
            sail_is_not_running
        fi

    # Initiate a PostgreSQL CLI terminal session within the "pgsql" container...
    elif [ "$1" == "psql" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=(pgsql bash -c)
            ARGS+=('PGPASSWORD=${PGPASSWORD} psql -U ${POSTGRES_USER} ${POSTGRES_DB}')
        else
            sail_is_not_running
        fi

    # Initiate a Bash shell within the application container...
    elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" bash "$@")
        else
            sail_is_not_running
        fi

    # Initiate a root user Bash shell within the application container...
    elif [ "$1" == "root-shell" ] || [ "$1" == "root-bash" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("$APP_SERVICE" bash "$@")
        else
            sail_is_not_running
        fi

    # Initiate a Redis CLI terminal session within the "redis" container...
    elif [ "$1" == "redis" ] ; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(exec)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=(redis redis-cli)
        else
            sail_is_not_running
        fi

    # Share the site...
    elif [ "$1" == "share" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker run --init --rm -p $SAIL_SHARE_DASHBOARD:4040 -t beyondcodegmbh/expose-server:latest share http://host.docker.internal:"$APP_PORT" \
                --server-host="$SAIL_SHARE_SERVER_HOST" \
                --server-port="$SAIL_SHARE_SERVER_PORT" \
                --auth="$SAIL_SHARE_TOKEN" \
                --subdomain="$SAIL_SHARE_SUBDOMAIN" \
                "$@"

            exit
        else
            sail_is_not_running
        fi

    # Pass unknown commands to the "docker-compose" binary...
    else
        ARGS+=("$@")
    fi
else
    display_help
fi

# Run Docker Compose with the defined arguments...
"${DOCKER_COMPOSE[@]}" "${ARGS[@]}"
